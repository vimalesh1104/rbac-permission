import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { PrimeIcons } from 'primeng/api';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import { AppConstants } from '../@core/constants/app-constants';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../@core/service/rbac.service";
import * as i2 from "@angular/forms";
import * as i3 from "../@core/service/alert.service";
import * as i4 from "primeng/api";
import * as i5 from "../@core/service/share-data.service";
import * as i6 from "../@core/service/data-store.service";
import * as i7 from "../@shared/alert/alert.component";
import * as i8 from "primeng/tree";
import * as i9 from "primeng/card";
import * as i10 from "@angular/material/radio";
import * as i11 from "primeng/dropdown";
import * as i12 from "primeng/checkbox";
import * as i13 from "primeng/inputtext";
import * as i14 from "@angular/common";
import * as i15 from "../@core/directives/permission.directive";
export class PermissionsComponent {
    constructor(injector, permissionService, formBuilder, alertService, confirmationService, 
    // private httpService: HttpService,
    _shareData, _storeservice) {
        this.permissionService = permissionService;
        this.formBuilder = formBuilder;
        this.alertService = alertService;
        this.confirmationService = confirmationService;
        this._shareData = _shareData;
        this._storeservice = _storeservice;
        this.menuItems = [];
        this.filteredPermissionList = [];
        this.selectedItem = {};
        this.RBACORG = new RBACINFO();
        this.position = 'top';
        this.duplicatepages = [];
        this.modelPermissiomName = '';
        this.dublicateIconList = [];
        this.treeData = [];
        this.showDeleteBtn = false;
        this.nodeType = 'page';
        this.saveMode = 'INSERT';
        this.sanitizer = injector.get(DomSanitizer);
        this.initializePageForm();
        this.initializePermissionForm();
        const iconArray = AppConstants.iconList;
        this.iconList = iconArray.sort((a, b) => a.label.localeCompare(b.label));
        this.dublicateIconList = this.iconList;
    }
    ngOnInit() {
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.RBACORG = res['RBACORG'];
                console.log(this.RBACORG, 'RBACORG Permisson');
                this.environment = this.RBACORG['environment'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                this.httpService = res['HTTPSERVICE'];
                if (this.orgId) {
                    this.setPagesList();
                }
                if (this.environment) {
                    this.loadInitial();
                }
            }
        });
        this.search = new FormControl();
        this.search.valueChanges
            .pipe(debounceTime(500), distinctUntilChanged(), map((value) => value === null || value === void 0 ? void 0 : value.toLowerCase()))
            .subscribe((value) => {
            const filtered = this.pages.filter((a) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
            const filteredIds = filtered.map((item) => item.id);
            const child = this.pages.filter((item) => filteredIds.includes(item.parentid));
            this.treeData = this.buildTree([...filtered, ...child], null);
        });
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    loadInitial() {
        this.loadTree();
        this.loadContextMenu();
        this.permissionService.getPermissionsTree(this.environment.applicationid).subscribe((items) => {
            this.permissions = items.data;
        });
        this.permissionService.getPermissionTypes(this.environment.applicationid).subscribe((items) => {
            this.permissionTypes = items.data;
        });
    }
    initializePageForm() {
        this.pageForm = this.formBuilder.group({
            id: [0],
            parentid: [null],
            applicationid: [this.environment ? this.environment['applicationid'] : ''],
            name: ['', Validators.required],
            route: ['', Validators.required],
            order: [0],
            ismenu: [false],
            thumbnail: [''],
            icon: ['', Validators.required],
            type: ['platform']
        });
    }
    initializePermissionForm() {
        this.permissionForm = this.formBuilder.group({
            id: [0],
            parentid: [null],
            pageid: [0],
            permissiontypeid: ['', Validators.required],
            key: ['', Validators.required],
            description: ['', Validators.required],
            order: [0]
        });
    }
    buildTree(pages, parentid) {
        const tree = [];
        pages
            .filter(page => page.parentid === parentid)
            .forEach(page => {
            const children = this.buildTree(pages, page.id);
            if (children.length > 0) {
                page.children = children;
            }
            else {
                page.children = [];
            }
            tree.push(page);
        });
        return tree;
    }
    onNodeContextMenuSelect(_event) {
        console.log();
    }
    nodeSelect(event) {
        var _a, _b, _c, _d, _e, _f;
        this.saveMode = 'UPDATE';
        this.showDeleteBtn = true;
        this.showLinkPage = false;
        this.nodeType = event.node.type;
        if (event.node.type === 'permission') {
            this.permissionForm.reset();
            this.permissionForm.patchValue(event.node);
        }
        else {
            this.pageForm.reset();
            this.pageForm.patchValue(event.node);
            this.getSelectedLabel((_b = (_a = event.node) === null || _a === void 0 ? void 0 : _a.additionalinfo) === null || _b === void 0 ? void 0 : _b.icon);
            this.pageForm.patchValue({
                icon: ((_c = event.node.additionalinfo) === null || _c === void 0 ? void 0 : _c.icon) || ''
            });
            this.pageForm.patchValue({
                type: 'platform'
            });
            if (event.node.route.includes('/pages/dynamic-search/search')) {
                this.showLinkPage = true;
                this.pageForm.patchValue({
                    type: 'dynamic'
                });
                this.pageForm.patchValue({
                    route: event.node.route.split('/')[4]
                });
            }
            this.imageInformation = ((_f = (_e = (_d = event.node.additionalinfo) === null || _d === void 0 ? void 0 : _d.thumbnail) === null || _e === void 0 ? void 0 : _e.fileName) === null || _f === void 0 ? void 0 : _f.split('/')[1]) || '';
        }
    }
    onNodeExpandClick(event, node) {
        if (node.menutype !== 'page') {
            // Handle the expansion logic here
            // For example, you might want to prevent expansion for certain conditions
            event.preventDefault();
        }
    }
    nodeExpand(event) {
        // const pageId = event.node.type === 'permission' ? event.node.pageid : event.node.data;
        // const parentId = event.node.type === 'permission' ? event.node.data : 0;
        // if (event.node && event.node.data) {
        //   this.permissionService.getPermissionTree(pageId, parentId).subscribe((nodes: any) => {
        //     event.node.children = (<any>nodes).data;
        //   });
        // }
    }
    searchIconList(event) {
        const value = event.target.value.toLowerCase();
        this.iconList = this.dublicateIconList.filter((a) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.label) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
    getSelectedLabel(val) {
        this.iconList = this.dublicateIconList;
        console.log(val);
        const filteredIcon = this.iconList.filter((i) => i.value === val);
        console.log(filteredIcon);
        this.selectedIconLabel = filteredIcon[0].label;
    }
    savePage() {
        const page = this.pageForm.value;
        page.applicationid = this.environment.applicationid;
        page.additionalinfo = {
            icon: page.icon
        };
        if (this.showLinkPage) {
            page.route = `/pages/dynamic-search/search/${page.route}`;
        }
        if (this.pageForm.valid) {
            page.order = page.order ? Number(page.order) : 1;
            if (this.saveMode === 'INSERT') {
                this.permissionService.createPage(page).subscribe((res) => {
                    // if (this.showLinkPage) {
                    page.id = res['data'];
                    this.savePermission(page);
                    // }
                    this.alertService.success('Page created successfully.');
                    this.loadTree();
                });
            }
            else {
                this.permissionService.updatePage(page).subscribe(() => {
                    this.alertService.success('Page updated successfully.');
                    this.loadTree();
                });
            }
        }
        else {
            this.alertService.error('Please Fill All Required Fields.');
        }
    }
    savePermission(page) {
        if (page) {
            this.permissionForm.patchValue({
                description: page.name,
                key: page.name.toUpperCase().replaceAll(' ', '_'),
                pageid: page.id,
                order: 1,
                permissiontypeid: 1
            });
        }
        const permission = Object.assign(Object.assign({}, this.permissionForm.value), { order: +this.permissionForm.value.order });
        if (this.permissionForm.valid) {
            permission.order = permission.order ? Number(permission.order) : 1;
            delete permission.readonly;
            if (this.saveMode === 'INSERT') {
                this.permissionService.createPermission(permission).subscribe(() => {
                    this.alertService.success('Permission created successfully.');
                    this.loadTree();
                });
            }
            else {
                this.permissionService.updatePermission(permission).subscribe(() => {
                    this.alertService.success('Permission updated successfully.');
                    this.loadTree();
                });
            }
        }
        else {
            // this.alertService.error('Invalid permission data.');
        }
    }
    clearForm() {
        if (this.nodeType === 'permission') {
            this.initializePermissionForm();
        }
        else {
            this.initializePageForm();
        }
    }
    selectType(type, event) {
        console.log(event, "radio event");
        if (type === 'platform') {
            this.showLinkPage = false;
            this.pageForm.patchValue({
                type: type
            });
            this.saveMode = 'INSERT';
            this.nodeType = 'page';
            this.clearForm();
        }
        else if (type === 'dynamic') {
            this.showLinkPage = true;
            this.pageForm.patchValue({
                type: type
            });
            this.saveMode = 'INSERT';
            this.nodeType = 'page';
            this.clearForm();
        }
    }
    addMenu() {
        this.showLinkPage = true;
        this.pageForm.patchValue({
            type: 'platform'
        });
        this.saveMode = 'INSERT';
        this.nodeType = 'page';
        this.showDeleteBtn = false;
        this.clearForm();
    }
    resetForm() {
        this.saveMode = '';
        this.imageInformation = '';
        this.pageForm.reset();
        this.clearForm();
    }
    removeThumbnail() {
        this.pageForm.controls['thumbnail'].reset();
        this.imageInformation = '';
    }
    // delete(event: Event) {
    //   event.stopPropagation();
    //   // this.deletedId = this.selectedItem.id;
    // }
    createPermissionForm() {
        this.initializePermissionForm();
        if (this.nodeType === 'page') {
            this.nodeType = 'permission';
            this.permissionForm.patchValue({
                pageid: this.selectedItem.id
            });
        }
        else {
            this.permissionForm.patchValue({
                pageid: this.selectedItem.pageid,
                parentid: this.selectedItem.id
            });
        }
    }
    loadContextMenu() {
        const permission = {
            SETTINGS_PER_CREATE_PAGE: true,
            SETTINGS_PER_CREATE_PERMISSION: true,
            SETTINGS_PER_DELETE: true
        };
        this.menuItems = [
            {
                label: 'Create Page',
                icon: PrimeIcons.ARROW_UP_LEFT,
                visible: permission.SETTINGS_PER_CREATE_PAGE,
                badge: 'SETTINGS_PER_CREATE_PAGE',
                command: (_event) => {
                    this.saveMode = 'INSERT';
                    this.nodeType = 'page';
                    this.showLinkPage = false;
                    this.clearForm();
                }
            },
            {
                label: 'Link Page',
                icon: PrimeIcons.ARROW_UP_LEFT,
                visible: permission.SETTINGS_PER_CREATE_PAGE,
                command: (_event) => {
                    this.saveMode = 'INSERT';
                    this.nodeType = 'page';
                    this.showLinkPage = true;
                    this.clearForm();
                }
            },
            {
                label: 'Create Permission',
                icon: PrimeIcons.ARROW_DOWN_RIGHT,
                visible: permission.SETTINGS_PER_CREATE_PERMISSION,
                badge: 'SETTINGS_PER_CREATE_PERMISSION',
                command: _event => {
                    this.saveMode = 'INSERT';
                    this.nodeType = this.selectedItem.type;
                    this.clearForm();
                    this.createPermissionForm();
                }
            },
            {
                label: 'Delete',
                icon: PrimeIcons.TRASH,
                visible: permission.SETTINGS_PER_DELETE,
                badge: 'SETTINGS_PER_DELETE',
                command: event => {
                    this.saveMode = 'DELETE';
                    this.nodeType = this.selectedItem.type;
                    // this.confirmationService.confirm({
                    //   target: event.target as EventTarget,
                    //   message: 'Are you sure that you want to delete?',
                    //   icon: 'pi pi-exclamation-triangle',
                    //   accept: () => {
                    //     //confirm action
                    $('#Deleteuser').modal('show');
                    // this.deleteItem();
                    //   },
                    //   reject: () => {
                    //     // This is intentional
                    //   },
                    // });
                }
            }
        ];
    }
    setPagesList() {
        this.permissionService.getOrganizationPage(this.orgId).subscribe((res) => {
            const data = res['data'];
            if (data && (data === null || data === void 0 ? void 0 : data.length)) {
                this.pagesList = data === null || data === void 0 ? void 0 : data.filter((a) => { var _a; return (_a = a.activeVersion) === null || _a === void 0 ? void 0 : _a.gridconfig; }).map((x) => {
                    x.activeVersion.pageid = x.activeVersion.pageid.toString();
                    return {
                        id: x.activeVersion.pageid,
                        pagename: x.activeVersion.pagename,
                        value: x.activeVersion.pagename
                    };
                });
            }
        });
    }
    loadTree() {
        this.permissionService.getAllPageTree(this.environment.applicationid).subscribe((items) => {
            this.pages = items;
            this.duplicatepages = items;
            if (this.pages.length) {
                this.selectedItem = this.pages[0];
            }
            this.treeData = this.buildTree(this.pages, null);
        });
    }
    cancel() {
        this.permissionForm.reset();
    }
    // delete() {
    //   // event.stopPropagation();
    //   // this.deletedId = id;
    //   $('#Deleteuser').modal('show');
    // }
    deleteItem() {
        this.saveMode = 'UPDATE';
        if (this.selectedItem.type === 'page') {
            // $('#Deleteuser').modal('show');
            this.permissionService.deletePage(this.selectedItem.id).subscribe((_item) => {
                this.cancel();
                $('#Deleteuser').modal('hide');
                this.alertService.success('Page deleted successfully.');
                this.loadTree();
            });
        }
        else {
            this.permissionService.deletePermission(this.selectedItem.id).subscribe((_item) => {
                // $('#Deleteuser').modal('show');
                this.cancel();
                $('#Deleteuser').modal('hide');
                this.alertService.success('Control Permission deleted successfully.');
                this.loadTree();
            });
        }
    }
    deletePermission() {
        this.saveMode = 'DELETE';
        this.nodeType = this.selectedItem.type;
        $('#Deleteuser').modal('show');
    }
    requiredIfValidator(predicate) {
        return (formControl) => {
            if (!formControl.parent) {
                return null;
            }
            if (predicate()) {
                return Validators.required(formControl);
            }
            return null;
        };
    }
    handleFileInput(fileValue) {
        const target = fileValue.target;
        const file = target.files[0];
        this.uploadedFile = fileValue.target.files[0].name;
        this.imageData = {
            contentType: fileValue.target.files[0].type,
            fileName: `dynamic-menu/${this.uploadedFile}`
        };
        this.imageInformation = this.uploadedFile;
        if (this.validateImage(fileValue.target.files)) {
            this.permissionService.uploadKey(this.imageData).subscribe((res) => {
                this.urlPath = res.data;
                const uploadAttachment = document.getElementById('file');
                const uploadAttachmentDetails = uploadAttachment.files[0];
                this.httpService.putUpload(this.urlPath, uploadAttachmentDetails, uploadAttachmentDetails.type).subscribe((_resp) => {
                    this.alertService.success('Uploaded Successfully!');
                    const reader = new FileReader();
                    reader.onload = () => {
                        const value = this.sanitizer.bypassSecurityTrustUrl(reader.result);
                        this.pageForm.patchValue({ thumbnail: value });
                    };
                    reader.readAsDataURL(file);
                    this.attachType = fileValue.target.files[0].type;
                }, (error) => {
                    if (error.status == 0) {
                        this.alertService.error('AppConstants.errorMessage');
                        this.uploadedFile = '';
                        this.urlPath = '';
                    }
                });
            }, (_error) => {
                this.alertService.error('AppConstants.errorMessage');
            });
        }
    }
    validateImage(file) {
        const fileSize = Number(file[0].size) / 1024;
        const filetype = file[0].type.replace('image/', '');
        if (filetype === 'jpg' ||
            filetype === 'jpeg' ||
            filetype === 'png' ||
            filetype === 'gif' ||
            filetype === 'svg+xml') {
            if (fileSize < 50) {
                return true;
            }
            else {
                this.imageInformation = 'Image size exceeds 50 KB';
                this.alertService.warn('File is bigger than 50 KB');
                return false;
            }
        }
        else {
            this.imageInformation = '';
            this.alertService.warn(`${filetype} format is not supported`);
            return false;
        }
    }
    searchPermissionList(event) {
        const value = event.target.value.toLowerCase();
        this.pages = this.duplicatepages.filter((a) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
    onModelPermission(value) {
        this.modelPermissiomName = value.replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());
    }
}
PermissionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PermissionsComponent, deps: [{ token: i0.Injector }, { token: i1.RbacService }, { token: i2.FormBuilder }, { token: i3.AlertService }, { token: i4.ConfirmationService }, { token: i5.ShareDataService }, { token: i6.DataStoreService }], target: i0.ɵɵFactoryTarget.Component });
PermissionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PermissionsComponent, selector: "permissions", ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"permission\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-4 col-md-6 col-12\">\r\n      <div class=\"clearfix\"></div>\r\n      <div class=\"tab-content py-2\">\r\n        <div class=\"tab-pane fade show active\">\r\n          <div class=\"form-group bgiconsearch d-flex\">\r\n            <input class=\"form-control\" placeholder=\"Search by Menu Name\" type=\"text\" [formControl]=\"search\"\r\n              pInputText />\r\n              <button class=\"btn btn-primary btncommon ml-2\" (click)=\"addMenu()\">Add</button>\r\n          </div>\r\n          <div class=\"clearfix\"></div>\r\n          <div class=\"masteracess\">\r\n            <!-- <p-tree [value]=\"pages\" selectionMode=\"single\" [(selection)]=\"selectedItem\"\r\n              (onNodeSelect)=\"nodeSelect($event)\" (onNodeContextMenuSelect)=\"onNodeContextMenuSelect($event)\"\r\n              (onNodeExpand)=\"nodeExpand($event)\" [contextMenu]=\"treeContextMenu\"></p-tree>\r\n            <p-contextMenu #treeContextMenu [model]=\"menuItems\" appendTo=\"body\"></p-contextMenu> -->\r\n            <!-- <p-confirmPopup styleClass=\"delete-popup\"></p-confirmPopup> -->\r\n            <p-tree [value]=\"treeData\" selectionMode=\"single\" [(selection)]=\"selectedItem\"\r\n              (onNodeSelect)=\"nodeSelect($event)\" (onNodeContextMenuSelect)=\"onNodeContextMenuSelect($event)\"\r\n              (onNodeExpand)=\"nodeExpand($event)\">\r\n              <ng-template let-node pTemplate=\"default\">\r\n                <span *ngIf=\"node.menutype === 'parent'\">\r\n                  <span class=\"ui-tree-toggler ui-clickable\" *ngIf=\"node.children && node.children.length > 0\"\r\n                    (click)=\"onNodeExpandClick($event, node)\"></span>\r\n                </span>\r\n                {{node.name}}\r\n                <!-- <p-contextMenu [model]=\"menuItems\" appendTo=\"body\"></p-contextMenu> -->\r\n                <ng-container *ngIf=\"node.children && node.children.length > 0\">\r\n                  <ng-container *ngTemplateOutlet=\"recursiveTree; context:{ $implicit: node.children }\"></ng-container>\r\n                </ng-container>\r\n              </ng-template>\r\n              <ng-template #recursiveTree let-nodes>\r\n                <ul>\r\n                  <li *ngFor=\"let child of nodes\">\r\n                    <ng-container\r\n                      *ngTemplateOutlet=\"recursiveTree; context:{ $implicit: child.children }\"></ng-container>\r\n                  </li>\r\n                </ul>\r\n              </ng-template>\r\n              <!-- <p-contextMenu #treeContextMenu [model]=\"menuItems\" appendTo=\"body\"></p-contextMenu> -->\r\n            </p-tree>\r\n            <div class=\"modal\" id=\"Deleteuser\" tabindex=\"-1\" role=\"dialog\">\r\n              <div class=\"modal-dialog\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                  <div class=\"modal-header\">\r\n                    <h5 class=\"modal-title\">Delete Permission</h5>\r\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                      <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                  </div>\r\n                  <div class=\"modal-body\">\r\n                    Are you sure you want to delete the Permission?\r\n                    <div class=\"clearfix\"></div>\r\n                    <div class=\"mt-2\">\r\n                      <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\"\r\n                        (click)=\"deleteItem()\">\r\n                        Delete\r\n                      </button>\r\n                      <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\"\r\n                        data-dismiss=\"modal\">Cancel</button>\r\n                    </div>\r\n                    <div class=\"clearfix\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-lg-8 col-md-6 col-12 master-right mt-2\">\r\n      <p-card *ngIf=\"nodeType === 'page'\" id=\"pageForm\" class=\"rbac-card\" [formGroup]=\"pageForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">{{saveMode === 'UPDATE' ? 'Update Menu' : 'Add Menu'}}</span>\r\n        </div>\r\n        <mat-radio-group formControlName=\"type\">\r\n          <mat-radio-button value=\"platform\" (click)=\"selectType('platform', $event)\">Plaform</mat-radio-button>\r\n          <mat-radio-button value=\"dynamic\" (click)=\"selectType('dynamic', $event)\">Dynamic</mat-radio-button>\r\n        </mat-radio-group>\r\n        <input id=\"cid\" type=\"hidden\" formControlName=\"id\" />\r\n        <input id=\"capplicationid\" type=\"hidden\" formControlName=\"applicationid\" />\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"cname\" class=\"referral-form-labels\">Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"cname\" type=\"text\" formControlName=\"name\" fieldKey=\"SETTINGS_PER_NAME\" placeholder=\"Enter Name\"\r\n              aria-describedby=\"cname\" pattern=\"[a-zA-Z0-9]*([a-zA-Z0-9]+\\s*)*\" [(ngModel)]=\"modelPermissiomName\"\r\n              (ngModelChange)=\"onModelPermission($event)\" pInputText />\r\n            <div *ngIf=\"\r\n              pageForm.controls['name'].invalid &&\r\n                pageForm.controls['name'].dirty &&\r\n              !pageForm.controls['name'].hasError('required')\">\r\n              <small *ngIf=\"pageForm.controls['name'].errors && pageForm.controls['name'].invalid\"\r\n                class=\"p-error block\">Invalid input data</small>\r\n            </div>\r\n            <div *ngIf=\"\r\n            pageForm.controls['name'].invalid &&\r\n            pageForm.controls['name'].hasError('required') &&\r\n          (pageForm.controls['name'].dirty || pageForm.controls['name'].touched)\">\r\n              <small *ngIf=\"pageForm.controls['name'].hasError('required')\" class=\"p-error block\">Name is\r\n                required</small>\r\n            </div>\r\n\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\" *ngIf=\"!showLinkPage\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Route\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"croute\" type=\"text\" formControlName=\"route\" fieldKey=\"SETTINGS_PER_ROUTE\"\r\n              placeholder=\"Enter Route\" aria-describedby=\"croute\" pattern=\"[a-zA-Z0-9\\/\\\\-]*\" pInputText />\r\n            <div *ngIf=\"\r\n              pageForm.controls['route'].invalid &&\r\n                pageForm.controls['route'].dirty &&\r\n              !pageForm.controls['route'].hasError('required')\">\r\n              <small *ngIf=\"pageForm.controls['route'].errors && pageForm.controls['route'].invalid\"\r\n                class=\"p-error block\">Invalid input data</small>\r\n            </div>\r\n            <div *ngIf=\"\r\n            pageForm.controls['route'].invalid &&\r\n            pageForm.controls['route'].hasError('required') &&\r\n          (pageForm.controls['route'].dirty || pageForm.controls['route'].touched)\">\r\n              <small *ngIf=\"pageForm.controls['route'].hasError('required')\" class=\"p-error block\">Route is\r\n                required</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\" *ngIf=\"showLinkPage\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Dynamic Pages\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown [options]=\"pagesList\" formControlName=\"route\" fieldKey=\"SETTINGS_PER_ROUTE\"\r\n              placeholder=\"Select Dynamic Page\" optionLabel=\"value\" optionValue=\"id\" [showClear]=\"true\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"\r\n                pageForm.controls['route'].invalid &&\r\n                (pageForm.controls['route'].dirty || pageForm.controls['route'].touched)\r\n              \">\r\n              <small *ngIf=\"pageForm.controls['route'].invalid\" class=\"p-error block\">Route is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels\">Parent Page </label>\r\n            <p-dropdown [options]=\"pages\" placeholder=\"Select Parent Page\" formControlName=\"parentid\" optionLabel=\"name\"\r\n              optionValue=\"id\" [showClear]=\"true\" fieldKey=\"SETTINGS_PER_PARENT_PAGE\">\r\n            </p-dropdown>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels d-none d-lg-inline-block\">&#160;</label>\r\n            <div>\r\n              <p-checkbox st inputId=\"binary\" [binary]=\"true\" fieldKey=\"SETTINGS_PER_MENU\" formControlName=\"ismenu\"\r\n                label=\"Menu\"></p-checkbox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"icon\" class=\"referral-form-labels\">\r\n              Icon\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown [options]=\"iconList\" styleClass=\"icon-dropdown\" formControlName=\"icon\" [filter]=\"true\"\r\n              optionLabel=\"label\" optionValue=\"value\" [showClear]=\"iconList && iconList.length\"\r\n              placeholder=\"Select Icon\" (keyup)=\"searchIconList($event)\" (onChange)=\"getSelectedLabel($event.value)\">\r\n              <ng-template pTemplate=\"selectedItem\">\r\n                <div class=\"d-flex flex-row align-items-center gap-2\" *ngIf=\"pageForm.controls['icon'].value\">\r\n                  <span class=\"material-symbols-outlined userempty ml-0\">\r\n                    {{ pageForm.controls['icon'].value }}\r\n                  </span>\r\n                  <div>{{ selectedIconLabel }}</div>\r\n                </div>\r\n              </ng-template>\r\n              <ng-template let-icon pTemplate=\"item\">\r\n                <div class=\"d-flex flex-row align-items-center gap-2\">\r\n                  <span class=\"material-symbols-outlined userempty ml-0\">\r\n                    {{ icon.value }}\r\n                  </span>\r\n                  <div>{{ icon.label }}</div>\r\n                </div>\r\n              </ng-template>\r\n            </p-dropdown>\r\n            <div *ngIf=\"\r\n              pageForm.controls['icon'].invalid &&\r\n              (pageForm.controls['icon'].dirty || pageForm.controls['icon'].touched)\r\n            \">\r\n              <small *ngIf=\"pageForm.controls['icon'].invalid\" class=\"p-error block\">Icon is required </small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon\" fieldKey=\"SETTINGS_PER_ADD_PAGE\"\r\n            (click)=\"savePage()\">\r\n            {{ saveMode === 'UPDATE' ? 'Update Menu' : 'Add Menu' }}\r\n          </button>\r\n          <button fieldKey=\"SETTINGS_PER_CANCEL\"\r\n            class=\"pull-right mb-2 mr-2 btn bg-white text-primary border border-primary btncancel\"\r\n            (click)=\"resetForm()\">\r\n            Cancel\r\n          </button>\r\n          <button fieldKey=\"SETTINGS_PER_CANCEL\"\r\n            class=\"pull-right mb-2 btn btn-danger\"\r\n            (click)=\"deletePermission()\"\r\n            *ngIf=\"showDeleteBtn\">\r\n            Delete\r\n          </button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </p-card>\r\n\r\n      <p-card *ngIf=\"nodeType === 'permission'\" id=\"permissionForm\" class=\"rbac-card\" [formGroup]=\"permissionForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Permission</span>\r\n        </div>\r\n\r\n        <input id=\"lid\" type=\"hidden\" formControlName=\"id\" />\r\n        <input id=\"lpermissionpageid\" type=\"hidden\" formControlName=\"permissiontypeid\" />\r\n        <input id=\"lparentid\" type=\"hidden\" formControlName=\"parentid\" />\r\n        <input id=\"lpageid\" type=\"hidden\" formControlName=\"pageid\" />\r\n\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lpermissiontype\" class=\"referral-form-labels\">Permission Type\r\n              <span class=\"requiredfield text-danger\">*</span></label>\r\n            <p-dropdown id=\"lpermissiontype\" [options]=\"permissionTypes\" placeholder=\"Select a Permission Type\"\r\n              formControlName=\"permissiontypeid\" optionLabel=\"name\" optionValue=\"id\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"permissionForm.controls['permissiontypeid'].errors\">\r\n              <small *ngIf=\"permissionForm.controls['permissiontypeid'].invalid\" class=\"p-error block\">Permission Type\r\n                is required\r\n              </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lkey\" class=\"referral-form-labels\">Key\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"lkey\" type=\"text\" placeholder=\"Enter Key\" formControlName=\"key\" aria-describedby=\"lkey-help\"\r\n              pInputText />\r\n            <div *ngIf=\"permissionForm.controls['key'].errors\">\r\n              <small *ngIf=\"permissionForm.controls['key'].invalid\" class=\"p-error block\">Key is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lvalue\" class=\"referral-form-labels\">Description <span\r\n                class=\"requiredfield text-danger\">*</span> </label>\r\n            <input id=\"lvalue\" type=\"text\" placeholder=\"Enter Value\" formControlName=\"description\"\r\n              aria-describedby=\"pname-help\" pInputText />\r\n            <div *ngIf=\"permissionForm.controls['description'].errors\">\r\n              <small *ngIf=\"permissionForm.controls['description'].invalid\" class=\"p-error block\">Description is\r\n                required\r\n              </small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"mt-2\">\r\n          <button type=\"submit\" class=\"pull-right mb-2 btn btn-primary btncommon\" (click)=\"savePermission()\">\r\n            {{ saveMode === 'UPDATE' ? 'Update Permission' : 'Add Permission' }}\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" (click)=\"clearForm()\">Cancel</button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </p-card>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".head-div{padding-top:9px;padding-left:7px}.bgiconsearch{margin-bottom:5px;padding-bottom:0;font-size:13px}.masteracess{border:solid 1px var(--table-border);border-radius:2px;padding:5px 0;overflow-y:auto;background:var(--bg-light)}.masterempty{max-width:none;border-radius:50%;height:40px;width:40px}.row.masterdata{margin:0;border-bottom:solid 1px var(--table-border);padding:5px 0;cursor:pointer}.overflow_txt{overflow:hidden;text-overflow:ellipsis}span.namemaster{font-size:13px;color:var(--text-dark)}.masterid,span.emailmaster{font-size:13px;color:#9b9b9b}span.deletemaster{position:absolute;top:0px;right:15px;z-index:9;width:20px;float:right;cursor:pointer}span.deletemaster img{width:12px}.activate{position:absolute;margin-top:-46px;margin-left:44rem}.toggleleft{font-size:14px;font-weight:600;display:block;margin-top:-12px;padding-bottom:13px}.report_button{margin-left:12px}:host ::ng-deep .ui-tree.permission-tree{width:100%}.userempty{max-width:none;padding:8px;border-radius:10%;height:36px;width:35px;color:var(--text-dark);margin-left:10px;display:flex;align-items:center}.fileupload .profile{color:#fff}.rbac-card .p-fluid .p-inputtext{padding:8px}.rbac-card .warning{margin-left:10px}.pi-trash{color:red;font-size:12px}@media screen and (max-width: 767px){.masteracess{max-height:400px}}@media screen and (min-width: 990px){.masteracess{height:calc(100vh - 188px)}}@media screen and (max-width: 990px){:host ::ng-deep .selected-list .c-list{width:calc(100% - 35px)!important}.pageLevelAccessTable{width:100%;overflow:auto}.pageLevelAccessTable .table{margin-bottom:60px}}:host ::ng-deep .icon-dropdown li.p-dropdown-item{padding:.5rem 15px!important}:host ::ng-deep .icon-dropdown li.p-dropdown-item.p-highlight .userempty,:host ::ng-deep .icon-dropdown li.p-dropdown-item:hover .userempty,:host ::ng-deep .icon-dropdown li.p-dropdown-item:focus .userempty{color:#fff}:host ::ng-deep .icon-dropdown .userempty{height:inherit;padding:0;justify-content:start;font-size:19px;width:25px}\n"], components: [{ type: i7.AlertComponent, selector: "app-alert" }, { type: i8.Tree, selector: "p-tree", inputs: ["value", "selectionMode", "selection", "style", "styleClass", "contextMenu", "layout", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "metaKeySelection", "propagateSelectionUp", "propagateSelectionDown", "loading", "loadingIcon", "emptyMessage", "ariaLabel", "togglerAriaLabel", "ariaLabelledBy", "validateDrop", "filter", "filterBy", "filterMode", "filterPlaceholder", "filteredNodes", "filterLocale", "scrollHeight", "virtualScroll", "virtualNodeHeight", "minBufferPx", "maxBufferPx", "indentation", "trackBy"], outputs: ["selectionChange", "onNodeSelect", "onNodeUnselect", "onNodeExpand", "onNodeCollapse", "onNodeContextMenuSelect", "onNodeDrop", "onFilter"] }, { type: i9.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }, { type: i10.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i11.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "virtualScroll", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "disabled", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear"] }, { type: i12.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }], directives: [{ type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i13.InputText, selector: "[pInputText]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i15.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i2.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PermissionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'permissions',
                    templateUrl: './permissions.component.html',
                    styleUrls: ['./permissions.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.RbacService }, { type: i2.FormBuilder }, { type: i3.AlertService }, { type: i4.ConfirmationService }, { type: i5.ShareDataService }, { type: i6.DataStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,